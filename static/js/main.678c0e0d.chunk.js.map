{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6RAyCeA,MA9Bf,YAAwD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC3C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SACKI,GADIC,QAKjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBC0CDC,G,kNApDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAKVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAIZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAPzB,2C,kEAaVQ,KAAKN,c,+BAIE,MAEuBM,KAAKT,MAA3BC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OACnB,OACA,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACI,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAe,GAAK,OACf,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GAvCTE,IAAMC,YCFxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,a","file":"static/js/main.678c0e0d.chunk.js","sourcesContent":["/**\n * Movie.js : Movie Component.\n * state를 필요로 하지 않으므로(바뀌지 않는 데이터들) class component가 될 필요가 없음. function component 이용\n * */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\n//Movie Component에서 year, title, summary, poster, genres 준비\n//alt와 title을 사용하는 이유 : poster위에 마우스를 올렸을 때, movie의 이름이 보이게 함\nfunction Movie({ year, title, summary, poster, genres}){\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title} /> \n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__year\">{year}</h5>\n                <ul className=\"movie__genres\">\n                    {genres.map((genre, index) => (\n                        <li key={index} className=\"genres__genre\">\n                            {genre}\n                        </li>\n                    ))}\n                </ul>\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n            </div>\n        </div>\n    );\n}\n\n// 원하는 props가 father component인 Movie로 부터 받은, 갖고 있는 props인지 check(점검)하는 작업. 실수를 했을 시 component가 동작하지 않을 것이라고 다양한 오류들을 알려줌.\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Movie;","/**\n * \n * App.js : index.js에서 app컴포넌트를 import해서 사용하게 되는 실질적 정보들이 모인 파일.\n * \n */\n\nimport React from \"react\"; // 이 import를 하지 않으면 여기에 jsx가 있는 component를 사용하는 것을 이해하지 못함\n// React : 내가 쓰는 모든 요소를 javascript와 함께 생성하고 html로 밀어넣음. react는 index.html에 element를 넣는 역할을 담당 = 모든 react application을 div사이에 넣음.\n// jsx : javascript 안의 HTML. component를 만들고 어떻게 사용하는지에 대한 것, component에 정보를 보낼 수 있음\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component{ // react component에서 존재하는 render method 등을 extends를 써 app component에서도 사용할 수 있게 함\n  //state : class component에 있는 object. component의 data를 넣을 공간이 생기고 이 data는 가변적. 즉 데이터가 변함. -> state를 사용해야 하는 이유. component의 data를 바꾸고 싶을 때.\n  state = { \n    isLoading: true,\n    movies: []\n  };\n  //api로부터 data fetching\n  //axios : fetch위에 있는 작은 layer. api를 사용할 때 쓰는 fetch보다 좋은 방법\n  //async()-await : javascript에게 getMovies function에게 시간이 조금 필요하고 우리는 그걸 기다려야만 한다는 개념. -> 비동기화(async:넌 \"await 이하를\" 기다려야해)\n  getMovies = async() => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    // this.state.~ 식으로 하면 react는 render function을 refresh하지 않음. -> 오류 발생 -> setState 사용(state를 바꾸고 싶고 react가 어떤 것이든 refresh해주기를 원할 때)\n    this.setState({ movies, isLoading: false }); // state는 object이므로 setState는 새로운 state를 받아야 함\n    // 간단히 말하면 setState를 호출 시 react는 state를 refresh, render function을 호출함!\n    // setState의 장점이자 React의 장점1 : virtual DOM을 갖고 있기 때문에 state를 업데이트 하면서 render function도 호출해 모든 내용을 다시 렌더링(칠한다)하지만 매우 빠르게 변경할 수 있음. \n    // ********** 간단한 state와 setState 사용의 차이 : setState를 안하면 새로운 state와 함께 render function을 호출하지 않음! setState를 써야 render function도 호출 됨\n  }\n  componentDidMount(){ //Mount : 태어나다는 의미. component가 마운트되자마자 호출됨!\n    this.getMovies(); //api로부터 data fetching\n  }\n\n  // ***** React는 자동적으로 class component의 render method를 실행함! // class component를 쓰는 이유 : state 사용(15번째 줄)\n  render() {\n    //es6의 마법. 리턴 시 this.state를 사용하지 않고 미리 선언해 정의하고 아래 isLoading 바로 사용\n    const { isLoading, movies } = this.state; // class이기 때문에 this. 를 써야함 //state에서 온 movies\n    return (\n    <section className=\"container\">\n      {isLoading ? ( // 삼항 연산자: 로딩중이면 Loading... , 끝나면 movie를 render하고 map을 만들고 movie를 render한다.\n        <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n        </div>\n        ) : ( // class가 아니라 className인 이유 : class 일 경우, 유효하지 않은 DOM property class라고 뜬다. jsx때문에, HTML처럼 보이지만 jsx 즉 javascript이므로 javascript안의 class라는 의미는 14번째줄의 class를 지칭 -> class가 아니라 className으로 바꿔 써야 함(HTML의 아주 작은 부분에만 적용. 그리고 console에서 inspect할 시 class로 바뀌어짐)\n          <div className=\"movies\"> \n            {movies.map(movie => (\n              <Movie // react의 장점2 : 재사용 가능한 component를 만들어 계속 반복해 수동이 아닌 자동으로 사용 가능(Movie component를 다음 줄에 또 쓸 필요가 없음)\n                key={movie.id} //key : react 내부에서 사용하는 props. 각각의 요소는 유일한 key prop을 가져야 함.(=key prop이 없을 시 뜨는 오류)\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres} // Movie component로 정보를 보내려고 하면 react는 이 모든 속성들(properties=props)를 가져옴 //props : 뭐든 component에 넣게 되는 것들\n              />\n            ))}\n          </div>\n        )}\n    </section>);\n  }\n}\n\nexport default App; //선언된 class App을 사용할 수 있게 export 해줌\n","/**\n * index.js : index.html에 빈 div 공간에 모든 정보를 가상화로 렌더링 해주는 연결 파일.\n * 핵심 개념 : Virtual DOM = virtual document object model. \n * application이 로드할 때 빈 HTML을 로드하게 되고 react가 component에 작성해 뒀던 것들을 HTML로 put -> react가 빠른 이유\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//***** react application은 하나의 component만을 rendering해야 함! (유일한 component = 여기선 App)\nReactDOM.render(<App />, document.getElementById('bababa')); // potato는 index.html의 div id 값임"],"sourceRoot":""}